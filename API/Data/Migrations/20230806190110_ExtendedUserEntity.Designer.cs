// <auto-generated />
using System;
using API.Date;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace API.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230806190110_ExtendedUserEntity")]
    partial class ExtendedUserEntity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.9");

            modelBuilder.Entity("API.Entities.Answers", b =>
                {
                    b.Property<int>("AnswersId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AnswersOption")
                        .HasColumnType("TEXT");

                    b.Property<string>("AnswersPublicId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("AnswersTrue")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionId")
                        .HasColumnType("INTEGER");

                    b.HasKey("AnswersId");

                    b.HasIndex("QuestionId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("API.Entities.AppExams", b =>
                {
                    b.Property<int>("ExamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExamDescription")
                        .HasColumnType("TEXT");

                    b.Property<int>("ExamGrade")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExamName")
                        .HasColumnType("TEXT");

                    b.HasKey("ExamId");

                    b.ToTable("Exams");
                });

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnType("BLOB");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnType("BLOB");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("API.Entities.ExamPhoto", b =>
                {
                    b.Property<int>("ExamPhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppExamsId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ExamPhotoPublicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExamPhotoUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("ExamPhotoId");

                    b.HasIndex("AppExamsId")
                        .IsUnique();

                    b.ToTable("ExamPhoto");
                });

            modelBuilder.Entity("API.Entities.Photo", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhotoPublicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhotoUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("PhotoId");

                    b.HasIndex("AppUserId")
                        .IsUnique();

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("API.Entities.Question", b =>
                {
                    b.Property<int>("QuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AppExamsId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("QuestionMark")
                        .HasColumnType("INTEGER");

                    b.Property<string>("QuestionPublicId")
                        .HasColumnType("TEXT");

                    b.Property<string>("QuestionText")
                        .HasColumnType("TEXT");

                    b.HasKey("QuestionId");

                    b.HasIndex("AppExamsId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("API.Entities.UserExam", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ExamId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AppUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserExamCamVideoUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("UserExamGrade")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserExamScreenVideoUrl")
                        .HasColumnType("TEXT");

                    b.HasKey("Id", "ExamId");

                    b.HasIndex("AppUserId");

                    b.HasIndex("ExamId");

                    b.ToTable("UserExam");
                });

            modelBuilder.Entity("API.Entities.Answers", b =>
                {
                    b.HasOne("API.Entities.Question", "Question")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("API.Entities.ExamPhoto", b =>
                {
                    b.HasOne("API.Entities.AppExams", "AppExams")
                        .WithOne("ExamPicture")
                        .HasForeignKey("API.Entities.ExamPhoto", "AppExamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppExams");
                });

            modelBuilder.Entity("API.Entities.Photo", b =>
                {
                    b.HasOne("API.Entities.AppUser", "AppUser")
                        .WithOne("ProfilePicture")
                        .HasForeignKey("API.Entities.Photo", "AppUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("API.Entities.Question", b =>
                {
                    b.HasOne("API.Entities.AppExams", "AppExams")
                        .WithMany("ExamQuestions")
                        .HasForeignKey("AppExamsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppExams");
                });

            modelBuilder.Entity("API.Entities.UserExam", b =>
                {
                    b.HasOne("API.Entities.AppUser", "AppUser")
                        .WithMany("UserExams")
                        .HasForeignKey("AppUserId");

                    b.HasOne("API.Entities.AppExams", "AppExams")
                        .WithMany("UserExams")
                        .HasForeignKey("ExamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppExams");

                    b.Navigation("AppUser");
                });

            modelBuilder.Entity("API.Entities.AppExams", b =>
                {
                    b.Navigation("ExamPicture");

                    b.Navigation("ExamQuestions");

                    b.Navigation("UserExams");
                });

            modelBuilder.Entity("API.Entities.AppUser", b =>
                {
                    b.Navigation("ProfilePicture");

                    b.Navigation("UserExams");
                });

            modelBuilder.Entity("API.Entities.Question", b =>
                {
                    b.Navigation("QuestionAnswers");
                });
#pragma warning restore 612, 618
        }
    }
}
